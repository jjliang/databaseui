
function Comment(  ) {
	this.container = document.createElement('div');
	$(this.container).css( "display", "block" );
	$(this.container).css( "margin", "6px" );
	this.button = document.createElement('button');
	this.button.setAttribute('title', "Add a comment to this data entry");
	$(this.button).button(  { icons: {primary:'ui-icon-comment'}, text: false } );
	$(this.button).tipTip()
	$(this.button).css( "border", "0px" );
	$(this.button).css( "height", "10px" );
	$(this.button).css( "width", "10px" );
	$(this.button).css( "padding", "0px" );
	$(this.button).css( "display", "block" );
	$(this.button).css( "float", "none" );
	$(this.button).css( "clear", "both" );

	$(this.button).click( createMethodReference(this, "openClose") );
	$(this.container).append(this.button);

}
Comment.prototype.openClose = function() {
	if( this.textarea != undefined) {
		$(this.textarea).remove();
		this.textarea = undefined;
	} else {
		this.textarea = document.createElement('textarea');
		$(this.container).append(this.textarea);
	}
}
Comment.prototype.getComment = function() {

}

function Datum(  ) {
	this.container = document.createElement('div');
	$(this.container).css( "display", "block" );
	$(this.container).css( "margin", "6px" );

	this.button = document.createElement('button');
	this.button.setAttribute('title', "Add a date to this data entry");
	$(this.button).button(  { icons: {primary:'ui-icon-clock'}, text: false } );
	$(this.button).tipTip()
	$(this.button).css( "border", "0px" );
	$(this.button).css( "height", "10px" );
	$(this.button).css( "width", "10px" );
	$(this.button).css( "padding", "0px" );
	$(this.button).css( "display", "block" );
	$(this.button).css( "float", "none" );
	$(this.button).css( "clear", "both" );
	$(this.button).click( createMethodReference(this, "openClose") );

	$(this.container).append(this.button);

	this.set_range_div= document.createElement('div');
	this.set_range_but = document.createElement('input');
	this.set_range_but.type = "checkbox";
	this.set_range_but.style.width = "20px";
	var s = document.createElement('span');
	$(s).text("two part time entry");
	this.set_range_div.appendChild(this.set_range_but);
	this.set_range_div.appendChild( s );

}
Datum.prototype.openClose = function() {
	if( this.left != undefined) {
		$(this.left).remove();
		this.left = undefined;
		if (this.right != undefined) {
			$(this.right).remove();
			this.right = undefined;
		}
		$(this.set_range_div).remove();
	} else {
		$(this.container).append(this.set_range_div);
		this.left = document.createElement('div');
		$(this.container).append(this.left);
	}
}

Datum.prototype.setSingle = function(){}
Datum.prototype.setDouble = function(){}
Datum.prototype.setYear = function( which ){}
Datum.prototype.setMonth = function( which ){}
Datum.prototype.setSeason = function( which ){}
Datum.prototype.setDate = function( which ){}

function Input( p, field_name, display_name, tooltip ) {
	this.parent = p;
	// protect here against inheritance methods
	this.id = "noid";
	this.field_name = field_name;
	this.display_name = display_name;
	if (p != undefined)
		this.id = p.id + "_" +  $.trim( this.field_name).toLowerCase().replace(/ /g,"_").replace(/[^a-z0-9]/gi,'');
	//else
	//	alert("created an Input with no id.");
	this.tooltip = tooltip;

	this.container = document.createElement('div');
	this.container.setAttribute('class', "divpad");
	this.container.setAttribute('id', this.id + "_container");

	this.label = document.createElement('label');
	this.label.innerHTML = this.display_name + ":";
	this.label.setAttribute('for', this.id);

	this.element = document.createElement('input');
	this.element.setAttribute('id', this.id);
	this.element.setAttribute('title', this.tooltip);
	this.element.setAttribute('type', 'text');
}


Input.prototype.create = function(  ) {
	this.container.appendChild(this.label);
	this.container.appendChild(this.element);
	if (this.parent == undefined || this.parent.element == undefined)
		alert("Input object requrires a parent.element");

	this.parent.element.appendChild( this.container );


	if (this.autocomplete_source != undefined && this.autocomplete_cb != undefined ) {
		$( this.element ).autocomplete({
			minLength: 3,
			select: this.autocomplete_cb,
			source: makeAutocompleteFunc( this.autocomplete_source ) // makeAutocompleteFunc is from utils.js
		});
	}
	
	this.element.setAttribute('title', this.tooltip);
	$( this.element ).tipTip();

}

Input.prototype.clear = function(  ) {
	var nname = this.element.nodeName.toLowerCase();
	if( nname == "div" ) {
		this.element.innerHTML = "";
		return;
	}
	if( nname == "input" || nname == "textarea" ) {
		if (nname == "input" && this.element.checked) {
			this.element.checked = false;
		}
		this.element.value = "";
		return;
	}
	if( nname == "select" ) {
		this.element.selectedIndex = 0;
		return;
	}

}


Input.prototype.hide = function(  ) {
	this.container.style.visibility = "hidden";
	this.container.style.display = "none";
}

Input.prototype.show = function(  ) {
	this.container.style.visibility = "visible";
	this.container.style.display = "block";
}



Input.prototype.setSelect = function (select_array) {
	this.element = document.createElement('select');
	this.element.setAttribute('id', this.id);
	this.element.setAttribute('title', this.tooltip);
	this.element.setAttribute('type', 'text');
	var tmp= "";
	// if there is a select array, we will draw a select form 
	// with the array elements as its options
	if (select_array != undefined) {
		tmp += '<option value=""></option>';
		for (var i=0;i< select_array.length;i++) {	
			var opt = select_array[i];
			if (typeof ( opt ) == "object") {
				// this is for display_options.locations and display_options.functional_groups
				// for locations, we want to make the spaces on the front of the names have a
				// mandatory space.  normally, the space doesn't show up in the drop down 
				// list without the &nbsp; in the  <option>
				tmp+='<option value="'+ opt.id +'">'+ opt.name.replace("     ", " &nbsp; ") +'</option>';
			} else {
				tmp+='<option value="'+ opt +'">'+ opt +'</option>';
			}
		}
		this.element.innerHTML = tmp;
	}
};

Input.prototype.setTextarea = function () {
	this.element = document.createElement('textarea');
	this.element.setAttribute('id', this.id);
	this.element.setAttribute('title', this.tooltip);
}

Input.prototype.setButton = function () {
	this.element = document.createElement('button');
	this.element.setAttribute('id', this.id);
	this.element.setAttribute('title', '');
	this.element.innerHTML = this.label.innerHTML.replace(":","");
	this.label.innerHTML="";
}

Input.prototype.setDiv = function () {
	this.element = document.createElement('div');
	this.element.setAttribute('id', this.id);
	//this.element.style.display ="inline-block";
	this.element.style.display ="inline";
	this.element.setAttribute('title', this.tooltip);
}


// used in getItisCommonNames 
Input.prototype.getCommonNamesFromDataAsString = function(data) { 
	valstring='';
	var first = true;
	if (data.return != undefined  && data.return.commonNames != undefined ){
		if (data.return.commonNames instanceof Array) {
			for (var n=0; n < data.return.commonNames.length;n++) {
				if (first) first=false;
				else valstring+=", ";
				valstring +=  data['return']['commonNames'][n]['commonName'];
			}
		} else if ( data.return.commonNames instanceof Object) {
			valstring +=  data.return.commonNames.commonName;
		}
		if (valstring =='')
			return "none";
		else
			return valstring;
	}
}

// use this function to retrieve Itis Common Names from 
// the Itis DB. A node may have more than one name.
//  is_val tells whether or not to set the 
// "val" on the element id or to set the "html"  
Input.prototype.getItisCommonNames = function( itis_id ) {
	var postdata = Object();
	postdata.functionName = "getCommonNamesFromTSN";
	postdata.tsn= itis_id;
	this.bg = this.element.style.background;
	this.element.style.background = "#ffffff url('css/ui-anim_basic_16x16.gif') right top no-repeat";
	$.ajax( { async:true, type:"GET", dataType:"json",
		data: postdata, 
		url: "auto/itis.php", 
		error : function (data, t, errorThrown) { alert("error: " + errorThrown); },
		success: createMethodReference(this, "getItisCommonNamesCB") 
	});
}

Input.prototype.getItisCommonNamesCB = function( data, t, x) {
	if (data == null || data == undefined) {
		alert("Error on getItisCommonNames, no response from server." );
	} else {			
		var retstring = this.getCommonNamesFromDataAsString(data);
		this.element.value = retstring;
		this.element.style.background = this.bg;
		if (this.onchange != undefined)
			this.onchange();
	}
}

Input.prototype.getItisLatinNameCB = function( data, t, x) {
	if (data == null || data == undefined) {
		alert("Error on getItisLatinName, no response from server." );
	} else {			
		var retstring = data.return.combinedName;
		this.element.value = retstring;
		this.element.style.background = this.bg;
		if (this.onchange != undefined)
			this.onchange();
	}
}
// use this function to retrieve Itis Latin/Scientific Name from 
// the Itis DB. It can only be one name.  
// is_val tells whether or not to set the 
// "val" on the element id or to set the "html" 
Input.prototype.getItisLatinName = function ( itis_id ) {
	var postdata = Object();
	postdata.functionName = "getScientificNameFromTSN";
	postdata.tsn= itis_id;
	this.bg = this.element.style.background;
	this.element.style.background = "#ffffff url('css/ui-anim_basic_16x16.gif') right top no-repeat";
	$.ajax( { async:true, type:"GET", dataType:"json",
		data: postdata, 
		url: "auto/itis.php", 
		error : function (data, t, errorThrown) { alert("error: " + errorThrown); },
		success: createMethodReference(this , "getItisLatinNameCB")
	});
}

InfoInput.prototype = new Input();
InfoInput.prototype.constructor = InfoInput;

function InfoInput( p, field_name, display_name, tooltip ) {
	Input.call(this, p, field_name, display_name, tooltip);
	this.container.setAttribute('class', "infoinputdiv");
	this.element.setAttribute('readonly', "true");
}



CiteInput.prototype = new Input();
CiteInput.prototype.constructor = CiteInput;

function CiteInput( p, field_name, display_name, tooltip, type ) {
	Input.call(this, p, field_name, display_name, tooltip);
	this.container.setAttribute('class', "citedvarscontainer");
	this.container.setAttribute('id', this.id + "_container");

	this.element.setAttribute("class", "medium");

	this.citedvars = document.createElement("div");
	this.citedvars.setAttribute("class", "citedvarsdiv");
	this.citedvars.innerHTML = " &nbsp; ";
	if (type == undefined) {
		this.type = "text"; 	// by default we set type to be text
	} else {
		this.type = type; 
	}

	this.comment = document.createElement("textarea");
	this.datum = document.createElement("textarea");
}

CiteInput.prototype.setNumber = function() {
	this.type = "number";
}

CiteInput.prototype.check = function() {
	if (this.element.value == "") {
		return true;
	} else	if (this.type == "text") {
		// do nothing
		return true;
	} else if ( this.type == "number") {
		if ( !isNumber( this.element.value ) ) {
			alert( this.display_name + " needs to be a numeric input");
			return false;
		}
	} else if ( this.type == "length_measure") {
		if ( this.element.value.slice(0, 11) != "none exists") {
			if (this.a == undefined || this.b == undefined || this.a.value == "" || this.b.value == "" || !isNumber(this.a.value) || !isNumber(this.b.value) ) {
				alert( this.display_name + " needs both 'A' and 'B' values to determine the length relationship measure. Both 'A' and 'B' must be numeric values.");
				return false;
			}
		}
	}
	return true;
}

CiteInput.prototype.create = function() {
	this.container.appendChild(this.label);
	if (this.a != undefined && this.b != undefined) {
		// we have a length weight input
		this.container.appendChild(this.equation);
	} else {
		this.container.appendChild(this.element);
	}
	this.container.appendChild(this.citedvars);

	if (this.parent == undefined || this.parent.element == undefined)
		alert("Input object requrires a parent.element");

	//alert("CiteInput create: " + this.id + " \nparent.element: " + this.parent.element.id);
	this.parent.element.appendChild( this.container );

	if (this.autocomplete_source != undefined && this.autocomplete_cb != undefined ) {
		$( this.element ).autocomplete({
			minLength: 3,
			select: this.autocomplete_cb,
			source: makeAutocompleteFunc( this.autocomplete_source ) // makeAutocompleteFunc is from utils.js
		});
	}

	// do it again just to be sure
	this.element.setAttribute('title', this.tooltip);
	$( this.element ).tipTip();
	this.element.setAttribute("class", "medium");
	this.setValues();
}

CiteInput.prototype.setLengthWeight = function (select_array) {
	this.type ="length_measure";
	this.setSelect(select_array);
	this.equation = document.createElement('div');

	this.a_label = document.createElement('span');
	this.a_label.innerText ="A:";
	this.a_label.style.paddingRight = "4px";
	this.a = document.createElement('input');
	this.a.setAttribute('id', this.id + "_a");
	this.a.setAttribute('title', "A");
	this.a.setAttribute('type', 'text');
	this.a.style.width = '30px';
	this.a.style.paddingRight = "4px";

	this.b_label = document.createElement('span');
	this.b_label.innerText ="B:";
	this.b_label.style.paddingRight = "4px";
	this.b_label.style.paddingLeft = "4px";
	this.b = document.createElement('input');
	this.b.setAttribute('id', this.id + "_b");
	this.b.setAttribute('title', "B");
	this.b.setAttribute('type', 'text');
	this.b.style.width = '30px';
	this.element.style.float ="none";
	this.equation.style.float ="left";
	this.a.style.float ="none";
	this.b.style.float ="none";
	this.a_label.style.float ="none";
	this.b_label.style.float ="none";
	this.equation.style.display ="block";
	this.equation.appendChild(this.element);
	this.equation.appendChild( document.createElement('br') );
	this.equation.appendChild(this.a_label);
	this.equation.appendChild(this.a);
	this.equation.appendChild(this.b_label);
	this.equation.appendChild(this.b);
}


CiteInput.prototype.getFields= function () {
	if (this.type == "length_measure") {
		return [ this.field_name, "a", "b" ];
	} else {
		return [ this.field_name ];
	}
}
CiteInput.prototype.getValues = function () {
	if (this.type == "length_measure") {
		return [ this.element.value, this.a.value, this.b.value ];
	} else {
		return [ this.element.value ];
	}
}

CiteInput.prototype.setValues = function () {
	var ns = Array();
	var val = "";
	if( this.parent instanceof StageTab  && this.parent.stage["stage_" + this.field_name] != undefined)	{
		ns = this.parent.stage["stage_" + this.field_name];
	} else if ( this.parent instanceof NodeDialog && this.parent.node["node_" + this.field_name] != undefined ) {
		ns = this.parent.node["node_" + this.field_name];
	} 
	if (ns.length < 1)
		this.citedvars.innerHTML = " &nbsp; ";
	else 
		this.citedvars.innerHTML = "";

	for (var i=0; i< ns.length; i++ ) {
		var tmp = ns[i];
		var val = tmp[this.field_name]; 
		var citespan = new CiteSpan( this, tmp.cite_id, val);
	}
	/*
	if (this.type == "length_measure") {
		//return [ this.element.value, this.a.value, this.b.value ];
	} else {
		//return [ this.element.value ];
	}
		*/
}

CiteInput.prototype.addNewCitedVarCB = function ( data ) {
	if (data.error != undefined) {
		alert(data.error);
		return;
	}

	if( this.parent instanceof StageTab )	{
		if (data["stage_" + this.field_name] !=  undefined) { 
			this.parent.stage["stage_" + this.field_name] =  data["stage_" + this.field_name];
			console.log(this.parent.stage);
		}
	} else if ( this.parent instanceof NodeDialog ) {
		if (data["node_" + this.field_name] !=  undefined) { 
			this.parent.node["node_" + this.field_name] =  data["node_" + this.field_name];
		}
	}
	citevardialog.close();
	this.clear();	
	this.setValues();
}

CiteInput.prototype.addNewCitedVar = function ( cite_id ) {
	if (this.element.value != "" ) {
		var p = new Object();
		p.functionName = "addNewCitedVar";
		if( this.parent instanceof StageTab )	{
			p.stage_id = this.parent.stage.id;
			p.table = "stage_" + this.field_name;
		} else if ( this.parent instanceof NodeDialog ) {
			p.node_id = this.parent.node.id;
			p.table = "node_" + this.field_name;
		}
		p.cite_id = cite_id;
		p.fields = this.getFields();
		p.values = this.getValues();
		$.ajax( { async:true, type:"GET", dataType:"json", 
			data: p,
			url: "query.php",
			error : function (jqXHR, textStatus, errorThrown) { console.log("error: " + errorThrown); },
			success: createMethodReference(this, "addNewCitedVarCB")
		});
	}
}

function CiteSpan (citeinput, cite_id, val) {
	this.citeinput = citeinput;
	this.value = val.replace(/ /g, "&nbsp;") 
	this.span = document.createElement("span");
	this.id = this.citeinput.id + "_cite_" + cite_id;
	this.span.innerHTML = val.replace(/ /g, "&nbsp;") 
	this.span.id = this.id;
	this.span.className = "cited";
	this.citeinput.citedvars.appendChild(this.span);
	this.getCitationInfo(cite_id);

}


CiteSpan.prototype.getCitationInfoCB = function(data, t, x) {	
	if (data == null) {
		alert("Error : data is null" );
	} else if (data.error != undefined ) {
		alert("Error: " + data.error);
	} else {
		// add to global citations array
		citations.push(data);
		citevardialog.addCiteToCitationDialogSelect(data);
		this.cite = data;
		var tmp = this.value + '&nbsp;-&nbsp;[' + data.authors[0].last_name + '.' + data.year +']';
		tmp +=  '&nbsp;&nbsp;';
		this.delete_button = document.createElement("button");
		this.delete_button.setAttribute("data-icon", "delete");
		this.delete_button.innerText = "delete";
		$( this.span ).html( tmp  );
		this.span.appendChild( this.delete_button );

		var $but = $( this.delete_button);
		$but.button( { icons: {primary:'ui-icon-circle-close'}, text: false } );
		$but.click(  createMethodReference(this, "deleteCitedVar") );
		$but.css( "border", "0px" );
		$but.css( "height", "10px" );
		$but.css( "width", "10px" );
		$but.css( "padding", "0px" );
		$but.css( "display", "inline-block" );
		$but.css( "float", "none" );
		$but.css( "clear", "both" );

		var authors="";
		for (var j=0;j< this.cite.authors.length;j++) {
			if (j != 0) authors+=", ";
			authors+=this.cite.authors[j].first_name + " ";
			authors+=this.cite.authors[j].last_name;
		}
		var tooltip = authors + ' - \'' +  this.cite.title + '\',' +  this.cite.year;
		tooltip += '<br><b>' + this.citeinput.display_name + '</b>: '+ this.value;
		this.span.setAttribute('title', tooltip);
		$( this.span ).tipTip();
	}
}

// call the DB to get citation info for a particular id
// appends the returned data to the global citation array
CiteSpan.prototype.getCitationInfo = function ( cite_id ) {
	// first check to see if we have it globally already
	var tmp_cite = citations.get(cite_id)
	if ( tmp_cite != undefined ) {
		return tmp_cite;
	}
	var postdata = Object() ;
	postdata.functionName = "getCitationInfo";
	postdata.cite_id = cite_id;
	$.ajax( { async:true, type:"GET", dataType:"json",
			data: postdata, 
			url: "query.php", 
			error : function (data, t, errorThrown) { alert("error: " + errorThrown); },
			success: createMethodReference(this, "getCitationInfoCB") 
	});
	return postdata.response;
}

// delete any cited variable whether for stage or node
// table - full name of table (node_max_age, stage_residency, etc.)
CiteSpan.prototype.deleteCitedVar = function( ) {
	if (!confirm("Delete this cited variable for '" + this.citeinput.display_name  + "'?" ) ) {
		return;
	}
	var obj = Object();
	obj.functionName = "deleteCitedVar";
	if( this.citeinput.parent instanceof StageTab )	{
		obj.stage_id = this.citeinput.parent.stage.id;
		obj.table = "stage_" + this.citeinput.field_name;
	} else if ( this.citeinput.parent instanceof NodeDialog ) {
		obj.node_id = this.citeinput.parent.node.id;
		obj.table = "node_" + this.citeinput.field_name;
	}
	obj.cite_id = this.cite.id;
	$.ajax( { async:true, type:"GET", dataType:"json",
		data: obj,
		url: "query.php",
		error : function (data, t, errorThrown) { alert("error: " + errorThrown); },
		success: createMethodReference(this, "deleteCitedVarCB")	
	} );
}

CiteSpan.prototype.deleteCitedVarCB = function( data, t, x) {
	if (data == null || data == undefined) {
		alert("Error : data is null" );
	} else if (  data.error != undefined) {
		alert("Error deleting citation value: " + data.error );
	} else {
		// everything went okay, we want to remove that one
		var pa = $( this.span ).parent();
		$( this.span ).remove();
		// this keeps the spacing together in the floated divs
		if ( $(pa).html( ) == "") 
			$(pa).html("&nbsp;");
		this.citeinput = undefined;
		this.cite = undefined;
		this.span = undefined;
		this.value = undefined;
	}
}
